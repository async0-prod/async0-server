name: async0 server CICD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.x"

      - name: Deps cache
        id: cache-go-deps
        uses: actions/cache@v4
        env:
          cache-name: go-deps-cache
        with:
          path: ~/godeps
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - if: ${{ steps.cache-go-deps.outputs.cache-hit != 'true' }}
        name: List the state of go modules
        continue-on-error: true
        run: go mod graph

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.63.4

      - name: Run golangci-lint
        run: golangci-lint run

      - name: Run tests
        run: |
          go test ./...

  push-to-dockerhub:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to dockerhub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/async0:server-latest
            ${{ secrets.DOCKER_USERNAME }}/async0:server-${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: true

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - push-to-dockerhub

    steps:
      - name: Join Tailscale network
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
          tags: tag:cicd
          version: latest
          use-cache: "true"

      - name: Deploy or update stack
        run: |
          ssh -o StrictHostKeyChecking=no deploy@async0 << 'EOF'
            set -e
            cd /home/deploy
            docker stack deploy -c async0.prod.yml async0
          EOF
